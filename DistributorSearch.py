# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from dotenv import load_dotenv
load_dotenv()
import config

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
import tkinter as tk
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import tkinter as tk
import os
import re
import queue

from supabase import create_client, Client

import cloudinary
import cloudinary.uploader
import cloudinary.api

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = ASSETS_PATH = OUTPUT_PATH / "assets" / "frame5"

# Supabase connection
url = os.environ.get("SUPABASE_URL")
key= os.environ.get("SUPABASE_KEY")
supabase = create_client(url, key)

#Get the env of profile pic
config.CLOUDINARY_FOLDER = os.getenv("CLOUDINARY_FOLDER", "https://res.cloudinary.com/dxb5plez8/image/upload/v1731812075/ProfilePic/")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


class SearchFrame(tk.Frame):
    def __init__ (self, master):
        #Some basic settings
        self.master = master
        super().__init__(master)
        
        self.canvas = Canvas(
        bg = "#FFFFFF",
        height = 500,
        width = 800,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        self.image_1 = self.canvas.create_image(
            400.0,
            40.0,
            image=self.image_image_1
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        self.image_2 = self.canvas.create_image(
            400.0,
            289.0,
            image=self.image_image_2
        )

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        self.button_1 = Button(
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_1_pressed,
            relief="flat"
        )
        self.button_1.place(
            x=281.0,
            y=340.0,
            width=240.0,
            height=40.0
        )

        self.entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        self.entry_bg_1 = self.canvas.create_image(
            400.0,
            280.0,
            image=self.entry_image_1
        )
        self.entry_1 = Entry(
            bd=0,
            bg="#D7D7D7",
            fg="#000716",
            highlightthickness=0
        )
        self.entry_1.place(
            x=216.0,
            y=260.0,
            width=368.0,
            height=38.0
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        self.button_2 = Button(
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_2_pressed,
            relief="flat"
        )
        self.button_2.place(
            x=0.0,
            y=0.0,
            width=160.0,
            height=79.0
        )

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        self.button_3 = Button(
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_3_pressed,
            relief="flat"
        )
        self.button_3.place(
            x=632.0,
            y=0.0,
            width=168.0,
            height=79.0
        )

        self.image_image_3 = PhotoImage(
            file=relative_to_assets("image_3.png"))
        self.image_3 = self.canvas.create_image(
            400.0,
            213.0,
            image=self.image_image_3
        )

    def button_1_pressed(self):
        
        print("search pressed")
        messagebox.showinfo("Search", "Searching for distributor...\n\nThis process might take a while.")
        
        if self.entry_1.get() == "":
            config.SEARCH_RESULT = supabase.table("Distributor").select("*").execute()
            self.canvas.place_forget()
            self.button_1.place_forget()
            self.button_2.place_forget()
            self.button_3.place_forget()
            self.entry_1.place_forget()
            try:
                from SearchResult import ResultFrame
            except ImportError as e:
                messagebox.showerror("Error", f"Cannot import ResultFrame: {e}")
                return
            except Exception as e:
                messagebox.showerror("Error", f"Unexpected error: {e}")
                return
            self.master.result_frame = ResultFrame(self.master)
            self.master.result_frame.place(x=0, y=0)
            return
        #Check if the entry is empty
        # if self.entry_1.get() == "":
        #     try:
        #         config.SEARCH_RESULT = supabase.table("Distributor").select("*").like("Name", "%" + self.entry_1.get() + "%").execute()
        #         if (len(config.SEARCH_RESULT.data) == 0):
        #             raise Exception
        #     except Exception as e:
        #         messagebox.showerror("Error", "Distributor not found.\n\n Please enter a valid distributor name!")
 
        #Check if the entry has a distributor ID
        if re.match(r"^VN-\d{6}$", self.entry_1.get()):
            try:
                config.SEARCH_RESULT = supabase.table("Distributor").select("*").eq("ID", self.entry_1.get()).execute()
                if (len(config.SEARCH_RESULT.data) == 0):
                    raise Exception
            except Exception as e:
                messagebox.showerror("Error", "Distributor not found.\n\n Please enter a valid distributor ID!")
                return
            
            #Switch to search result frame
            self.canvas.place_forget()
            self.button_1.place_forget()
            self.button_2.place_forget()
            self.button_3.place_forget()
            self.entry_1.place_forget()
            from SearchResult import ResultFrame
            self.master.result_frame = ResultFrame(self.master)
            self.master.result_frame.place(x=0, y=0)
        else:
            #Check if the entry has a distributor name
            try:
                config.SEARCH_RESULT = supabase.table("Distributor").select("*").like("Name", "%" + self.entry_1.get() + "%").execute()
                if (len(config.SEARCH_RESULT.data) == 0):
                    raise Exception
            except Exception as e:
                messagebox.showerror("Error", "Distributor not found.\n\n Please enter a valid distributor name!")
                return

            #Switch to search result frame
            self.canvas.place_forget()
            self.button_1.place_forget()
            self.button_2.place_forget()
            self.button_3.place_forget()
            self.entry_1.place_forget()
            from SearchResult import ResultFrame
            self.master.result_frame = ResultFrame(self.master)
            self.master.result_frame.place(x=0, y=0)
        
    def button_2_pressed(self):
        print("search to home pressed")
        self.canvas.place_forget()
        self.button_1.place_forget()
        self.button_2.place_forget()
        self.button_3.place_forget()
        self.entry_1.place_forget()
        from Home import HomeFrame
        self.master.home_frame = HomeFrame(self.master)
        self.master.home_frame.place(x=0, y=0)
        
    def button_3_pressed(self):
        #Reset the entry
        print("reset pressed")
        self.entry_1.delete(0, "end")
        
