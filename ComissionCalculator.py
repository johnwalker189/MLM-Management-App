
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
from dotenv import load_dotenv
load_dotenv()

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import tkinter as tk
import os
import re
import requests
from io import BytesIO
import config

from supabase import create_client, Client

import cloudinary
import cloudinary.uploader
import cloudinary.api

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = ASSETS_PATH = OUTPUT_PATH / "assets" / "frame0"

url = os.environ.get("SUPABASE_URL")
key= os.environ.get("SUPABASE_KEY")
supabase = create_client(url, key)      

def check_url_exists(url):
    try:
        # Gửi yêu cầu HEAD để kiểm tra tồn tại của URL
        response = requests.head(url, allow_redirects=True, timeout=5)
        
        # Kiểm tra mã trạng thái HTTP
        if 200 <= response.status_code < 300:
            return True  # URL tồn tại
        else:
            return False  # URL không tồn tại hoặc không hợp lệ

    except requests.RequestException as e:
        # Lỗi mạng hoặc URL không hợp lệ
        print(f"Lỗi: {e}")
        return False              
                
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

config.CLOUDINARY_FOLDER = os.getenv("CLOUDINARY_FOLDER", "https://res.cloudinary.com/dxb5plez8/image/upload/v1731812075/ProfilePic/")
class CalculatorFrame(tk.Frame):
    def __init__ (self, master):
        #Some basic settings
        self.master = master
        super().__init__(master)
        
        self.canvas = Canvas(
            self.master,
            bg = "#FFFFFF",
            height = 500,
            width = 800,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        self.image_1 = self.canvas.create_image(
            400.0,
            250.0,
            image=self.image_image_1
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        self.image_2 = self.canvas.create_image(
            400.0,
            42.0,
            image=self.image_image_2
        )

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        self.button_1 = Button(
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_1_clicked,
            relief="flat"
        )
        self.button_1.place(
            x=0.0,
            y=0.0,
            width=160.0,
            height=84.0
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        self.button_2 = Button(
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_2_clicked,
            relief="flat"
        )
        self.button_2.place(
            x=12.0,
            y=426.0,
            width=200.0,
            height=40.0
        )

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        self.button_3 = Button(
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_3_clicked,
            relief="flat"
        )
        self.button_3.place(
            x=302.0,
            y=426.0,
            width=200.0,
            height=40.0
        )

        self.button_image_4 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        self.button_4 = Button(
            image=self.button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_4_clicked,
            relief="flat"
        )
        self.button_4.place(
            x=588.0,
            y=426.0,
            width=200.0,
            height=40.0
        )

        self.button_image_5 = PhotoImage(
            file=relative_to_assets("button_5.png"))
        self.button_5 = Button(
            image=self.button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_5_clicked,
            relief="flat"
        )
        self.button_5.place(
            x=632.0,
            y=0.0,
            width=168.0,
            height=84.0
        )

        self.entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        self.entry_bg_1 = self.canvas.create_image(
            212.0,
            297.0,
            image=self.entry_image_1
        )
        self.entry_1 = Entry(
            bd=0,
            bg="#D7D7D7",
            fg="#000716",
            highlightthickness=0
        )
        self.entry_1.place(
            x=28.0,
            y=277.0,
            width=368.0,
            height=38.0
        )

        self.image_image_3 = PhotoImage(
            file=relative_to_assets("image_3.png"))
        self.image_3 = self.canvas.create_image(
            102.0,
            245.0,
            image=self.image_image_3
        )

        self.entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        self.entry_bg_2 = self.canvas.create_image(
            212.0,
            193.0,
            image=self.entry_image_2
        )
        self.entry_2 = Entry(
            bd=0,
            bg="#D7D7D7",
            fg="#000716",
            highlightthickness=0
        )
        self.entry_2.place(
            x=28.0,
            y=173.0,
            width=368.0,
            height=38.0
        )

        self.image_image_4 = PhotoImage(
            file=relative_to_assets("image_4.png"))
        self.image_4 = self.canvas.create_image(
            86.0,
            141.0,
            image=self.image_image_4
        )

        self.canvas.create_rectangle(
            12.0,
            22.0,
            52.0,
            62.0,
            fill="#FFFFFF",
            outline="")

        self.image_image_5 = PhotoImage(
            file=relative_to_assets("image_5.png"))
        self.image_5 = self.canvas.create_image(
            645.0,
            177.0,
            image=self.image_image_5
        )

        self.text_1 = self.canvas.create_text(
            509.0,
            269.0,
            anchor="nw",
            text="Name: ",
            fill="#000000",
            font=("Arial", 15 * -1, "bold")
        )

        self.text_2 = self.canvas.create_text(
            12.0,
            357.0,
            anchor="nw",
            text="Total commission:",
            fill="#000000",
            font=("Arial", 15 * -1, "bold")
        )

        self.text_3 = self.canvas.create_text(
            509.0,
            313.0,
            anchor="nw",
            text="ID:",
            fill="#000000",
            font=("Arial", 15 * -1, "bold")
        )

        self.text_4 = self.canvas.create_text(
            509.0,
            357.0,
            anchor="nw",
            text="Commission:",
            fill="#000000",
            font=("Arial", 15 * -1, "bold")
        )
        
        # Bind format_currency function to the self.entry_1
        self.entry_1.bind("<KeyRelease>", lambda event: self.format_currency(self.entry_1))
        
    def button_1_clicked(self):
        print("calculator_to_home clicked")
        self.canvas.place_forget()
        self.button_1.place_forget()
        self.button_2.place_forget()
        self.button_3.place_forget()
        from Home import HomeFrame
        self.master.home_frame = HomeFrame(self.master)
        self.master.home_frame.place(x=0, y=0)

    def button_2_clicked(self):
        
        print("show individual commission button clicked")
        
        #If both entries are empty, reset everything on the frame
        if (self.entry_1.get() == "" and self.entry_2.get() == ""):
            self.canvas.itemconfig(self.text_1, text="Name: ")
            self.canvas.itemconfig(self.text_2, text="Total commission: ")
            self.canvas.itemconfig(self.text_3, text="ID: ")
            self.canvas.itemconfig(self.text_4, text="Commission: ")
            self.image_image_5 = PhotoImage(
            file=relative_to_assets("image_5.png"))
            self.image_5 = self.canvas.create_image(
                645.0,
                177.0,
                image=self.image_image_5
            )
            return
        
        #Delete the "," in the self.entry_1
        sales = self.entry_1.get().replace(",", "")

        #Check if entry 2 is a valid ID
        pattern = r"^VN-\d{6}$"
        if (re.match(pattern, self.entry_2.get()) == None):
            messagebox.showwarning("Warning", "Invalid Distributor ID!\n\nPlease enter a valid Distributor ID.")
            #Reset everything on the frame
            self.entry_1.delete(0, 'end')
            self.entry_2.delete(0, 'end')
            self.canvas.itemconfig(self.text_1, text="Name: ")
            self.canvas.itemconfig(self.text_2, text="Total commission: ")
            self.canvas.itemconfig(self.text_3, text="ID: ")
            self.canvas.itemconfig(self.text_4, text="Commission: ")
            self.image_image_5 = PhotoImage(
                file=relative_to_assets("image_5.png"))
            self.image_5 = self.canvas.create_image(
            645.0,
            177.0,
            image=self.image_image_5
            )
            return
        
        #Check if ID exists in the database
        response = (
            supabase.table("Distributor").
            select("*").
            eq("ID", self.entry_2.get()).
            execute()
        )
        
        if (len(response.data) == 0):
            messagebox.showwarning("Warning", "Distributor ID not found!\n\nPlease enter a valid Distributor ID.")
            #Reset everything on the frame
            self.entry_1.delete(0, 'end')
            self.entry_2.delete(0, 'end')
            self.canvas.itemconfig(self.text_1, text="Name: ")
            self.canvas.itemconfig(self.text_2, text="Total commission: ")
            self.canvas.itemconfig(self.text_3, text="ID: ")
            self.canvas.itemconfig(self.text_4, text="Commission: ")
            self.image_image_5 = PhotoImage(
                file=relative_to_assets("image_5.png"))
            self.image_5 = self.canvas.create_image(
            645.0,
            177.0,
            image=self.image_image_5
            )
            return
        
        #Check if sales is a valid number
        try:
            response = (
                supabase.table("Distributor_Commission").
                update({"Sales": int(sales)}).
                eq("ID", self.entry_2.get()).
                execute()
            )
            print(response)
        except Exception as e:
            messagebox.showerror("Error", str(e) + "\n" + "Please enter a valid number for sales!")
            #Reset everything on the frame
            self.entry_1.delete(0, 'end')
            self.entry_2.delete(0, 'end')
            self.canvas.itemconfig(self.text_1, text="Name: ")
            self.canvas.itemconfig(self.text_2, text="Total commission: ")
            self.canvas.itemconfig(self.text_3, text="ID: ")
            self.canvas.itemconfig(self.text_4, text="Commission: ")
            return
        else:
            messagebox.showinfo("Success", "Individual commisison has been calculated!\nPlease wait for the result.")
        
        #Show the result on the frame
        response = (
            supabase.table("Distributor").
            select("*").
            eq("ID", self.entry_2.get()).
            execute()
        )
        self.canvas.itemconfig(self.text_1, text="Name: " + response.data[0]["Name"])
        self.canvas.itemconfig(self.text_3, text="ID: " + response.data[0]["ID"])
        response = (
            supabase.table("Distributor_Commission").
            select("*").
            eq("ID", self.entry_2.get()).
            execute()
        )
        self.canvas.itemconfig(self.text_4, text="Commission: " + self.format_money(str(response.data[0]["Commission"])) + " VND")
        
        #Get the image from the server
        url = config.CLOUDINARY_FOLDER + self.entry_2.get() + ".jpg"
        if (check_url_exists(url) == False):
            url = config.CLOUDINARY_FOLDER + "default.webp"
        try:
            response = requests.get(url)
            response.raise_for_status()
        except Exception as e:
            messagebox.showerror("Error", "Error while fetching image from the server!\n" + str(e))
            return
        
        #Convert image data to PIL image
        img_data = BytesIO(response.content)
        self.image_image_5 = Image.open(img_data)
        self.image_image_5 = self.image_image_5.resize((160, 160))
        self.image_image_5 = ImageTk.PhotoImage(self.image_image_5)
        self.canvas.itemconfig(self.image_5, image=self.image_image_5)
        
    def button_3_clicked(self):
        
        print("show total commission button clicked")
        response = supabase.rpc("sum_commission").execute() 
        print(response.data)
        
        #Show the result on the frame
        self.canvas.itemconfig(self.text_2, text="Total commission: " + self.format_money(str(response.data)) + " VND")
        
    def button_4_clicked(self):
        print("reset button clicked")
        supabase.table("Distributor_Commission").update({"Sales": 0}).neq("ID", -1).execute()
        supabase.table("Distributor_Commission").update({"Commission": 0}).neq("ID", -1).execute()
        
        #Reset everything on the frame
        self.entry_1.delete(0, 'end')
        self.entry_2.delete(0, 'end')
        self.canvas.itemconfig(self.text_1, text="Name: ")
        self.canvas.itemconfig(self.text_2, text="Total commission: ")
        self.canvas.itemconfig(self.text_3, text="ID: ")
        self.canvas.itemconfig(self.text_4, text="Commission: ")
        self.image_image_5 = PhotoImage(
            file=relative_to_assets("image_5.png"))
        self.image_5 = self.canvas.create_image(
            645.0,
            177.0,
            image=self.image_image_5
        )
        
        #Show success message
        messagebox.showinfo("Success", "All data has been reset!")
    
    def button_5_clicked(self):
        print("calculator_to_search clicked")
        self.canvas.place_forget()
        self.button_1.place_forget()
        self.button_2.place_forget()
        self.button_3.place_forget()
        self.button_4.place_forget()
        from DistributorSearch import SearchFrame
        self.master.search_frame = SearchFrame(self.master)
        self.master.search_frame.place(x=0, y=0)
    
    def format_currency(event, entry):
    # Lấy giá trị hiện tại từ ô Entry
        value = entry.get()
        
        # Xóa các dấu phẩy cũ (nếu có) và kiểm tra tính hợp lệ
        value = value.replace(",", "")
        if value.isdigit():
            # Thêm dấu phẩy vào số tiền
            formatted_value = "{:,}".format(int(value))
            # Cập nhật lại nội dung ô Entry
            entry.delete(0, tk.END)
            entry.insert(0, formatted_value)
        elif value == "":
            # Nếu người dùng xóa hết, giữ ô Entry trống
            entry.delete(0, tk.END)
        else:
            # Nếu không hợp lệ, hiển thị thông báo
            tk.messagebox.showwarning("Invalid Input", "Please enter only numbers!")
            entry.delete(0, tk.END)

    def format_money(self, amount):
        """
        Định dạng chuỗi số tiền nguyên bằng cách thêm dấu phẩy vào các phần nghìn.
        
        Parameters:
            amount (int or str): Số tiền nguyên cần định dạng.
            
        Returns:
            str: Chuỗi số tiền được định dạng.
        """
        try:
            # Chuyển input sang kiểu int nếu đầu vào là chuỗi
            amount = int(amount)
            # Định dạng với dấu phẩy
            formatted = "{:,}".format(amount)
            return formatted
        except ValueError:
            return "Invalid input: Not an integer"


    