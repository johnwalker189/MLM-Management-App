
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from dotenv import load_dotenv
load_dotenv()

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
import tkinter as tk
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import tkinter as tk
import os
import re
import queue
import config

from supabase import create_client, Client

import cloudinary
import cloudinary.uploader
import cloudinary.api

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = ASSETS_PATH = OUTPUT_PATH / "assets" / "frame1"

# Supabase connection
url = os.environ.get("SUPABASE_URL")
key= os.environ.get("SUPABASE_KEY")
supabase = create_client(url, key)

#Get the env of profile pic
config.CLOUDINARY_FOLDER = os.getenv("CLOUDINARY_FOLDER", "https://res.cloudinary.com/dxb5plez8/image/upload/v1731812075/ProfilePic/")

q = []
    
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def finding_the_path(ParentID):
    print("Finding the child of " + ParentID)
    global q
    result = supabase.table("Parent_Child").select("*").eq("ParentID", ParentID).execute()
    if (len(result.data) == 0):
        q.append(ParentID)
        return
    else:
        q.append(ParentID)
        finding_the_path(result.data[0]["KidID"])
    
class DeleteFrame(tk.Frame):
    def __init__(self, master):
        #Some basic settings
        self.master = master
        super().__init__(master)

        self.canvas = Canvas(
            self.master,
            bg = "#FFFFFF",
            height = 500,
            width = 800,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        self.image_1 = self.canvas.create_image(
            400.0,
            250.0,
            image=self.image_image_1
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        self.image_2 = self.canvas.create_image(
            400.0,
            42.0,
            image=self.image_image_2
        )

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        self.button_1 = Button(
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_1_clicked,
            relief="flat"
        )
        self.button_1.place(
            x=0.0,
            y=0.0,
            width=160.0,
            height=84.0
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        self.button_2 = Button(
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_2_clicked,
            relief="flat"
        )
        self.button_2.place(
            x=281.0,
            y=340.0,
            width=240.0,
            height=40.0
        )

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        self.button_3 = Button(
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_3_clicked,
            relief="flat"
        )
        self.button_3.place(
            x=632.0,
            y=0.0,
            width=168.0,
            height=84.0
        )
        
        self.entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        self.entry_bg_1 = self.canvas.create_image(
            400.0,
            280.0,
            image=self.entry_image_1
        )
        self.entry_1 = Entry(
            bd=0,
            bg="#D7D7D7",
            fg="#000716",
            highlightthickness=0
        )
        self.entry_1.place(
            x=216.0,
            y=260.0,
            width=368.0,
            height=38.0
        )

        self.image_image_3 = PhotoImage(
            file=relative_to_assets("image_3.png"))
        self.image_3 = self.canvas.create_image(
            400.0,
            212.0,
            image=self.image_image_3
        )

        self.canvas.create_rectangle(
            12.0,
            22.0,
            52.0,
            62.0,
            fill="#FFFFFF",
            outline="")      
        
    def button_1_clicked(self):
        print("delete_to_home clicked")
        self.canvas.place_forget()
        self.button_1.place_forget()
        self.button_2.place_forget()
        self.entry_1.place_forget()
        from Home import HomeFrame
        self.master.home_frame = HomeFrame(self.master)
        self.master.home_frame.place(x=0, y=0)

    def button_2_clicked(self):
        print("delete button clicked")
        
        #Check if the Distributor ID is valid
        pattern = r"^VN-\d{6}$"
        if (re.match(pattern, self.entry_1.get()) == None):
            messagebox.showwarning("Warning", "Invalid Distributor ID!\n\nPlease enter a valid Distributor ID.")
            return
        
        #Check if the Distributor ID exists
        result = supabase.table("Distributor").select("*").eq("ID", self.entry_1.get()).execute()
        if (len(result.data) == 0):
            messagebox.showwarning("Warning", "Distributor ID not found!\n\nPlease enter a valid Distributor ID.")
            return
        
        #Check if the Distributor has any children and act accordingly
        try:
            result = supabase.table("Parent_Child").select("*").eq("ParentID", self.entry_1.get()).execute()
        except Exception as e:
            messagebox.showwarning("Warning", "An unexpected error occured:\n\n" + str(e) + '\n\n' 
                               + "Something has gone wrong while we search for the Distributor with the given ID.")
        
        if (len(result.data) == 0):
            try:
                supabase.table("Distributor").delete().eq("ID", self.entry_1.get()).execute()
                supabase.table("Distributor_Commission").delete().eq("ID", self.entry_1.get()).execute()
                supabase.table("Parent_Child").delete().eq("KidID", self.entry_1.get()).execute()
                cloudinary.uploader.destroy("ProfilePic/" + self.entry_1.get())
                messagebox.showinfo("Delete", "Delete successfully!")
            except Exception as e:
                messagebox.showwarning("Warning", "An unexpected error occured:\n\n" + str(e) + '\n\n' 
                                + "Something has gone wrong while we delete the Distributor with the given ID.")
            return
        
        #Find route to the leaf node
        global q
        q = []
        finding_the_path(self.entry_1.get())
        print(q)
        
        #Start to move the children to the parent in Parent_Child table
        q.reverse()
        for i in range(len(q)):
            if (i == len(q) - 1):
                break
            else:
                try:
                    supabase.table("Parent_Child").update({"ParentID": q[i]}).eq("ParentID", q[i+1]).execute()
                    if (i > 0):
                        supabase.table("Parent_Child").update({"KidID": q[i-1]}).eq("KidID", q[i]).execute()
                    else:
                        supabase.table("Parent_Child").delete().eq("KidID", q[i]).execute()
                except Exception as e:
                    messagebox.showwarning("Warning", "An unexpected error occured:\n\n" + str(e) + '\n\n' 
                                + "Something has gone wrong while we moved the Distributors.")
        
        #Delete in Distributor and Commission table
        try:
            supabase.table("Distributor").delete().eq("ID", self.entry_1.get()).execute()
            supabase.table("Distributor_Commission").delete().eq("ID", self.entry_1.get()).execute()
            cloudinary.uploader.destroy("ProfilePic/" + self.entry_1.get())
        except Exception as e:
            messagebox.showwarning("Warning", "An unexpected error occured:\n\n" + str(e) + '\n\n' 
                                + "Something has gone wrong while we delete the Distributor with the given ID.")
        
        #Message box saying that the Distributor has been deleted
        messagebox.showinfo("Delete", "Delete successfully!")
        
    def button_3_clicked(self):
        print("delete_to_search clicked")
        self.canvas.place_forget()
        self.button_1.place_forget()
        self.button_2.place_forget()
        self.entry_1.place_forget()
        from DistributorSearch import SearchFrame
        self.master.search_frame = SearchFrame(self.master)
        self.master.search_frame.place(x=0,y=0)
        
        
        